head	1.47;
access;
symbols;
locks
	stevenh:1.47; strict;
comment	@# @;


1.47
date	2014.07.03.02.06.56;	author stevenh;	state Exp;
branches;
next	1.46;

1.46
date	2014.07.02.22.08.52;	author stevenh;	state Exp;
branches;
next	1.45;

1.45
date	2014.07.02.22.08.30;	author stevenh;	state Exp;
branches;
next	1.44;

1.44
date	2014.07.02.22.03.42;	author stevenh;	state Exp;
branches;
next	1.43;

1.43
date	2014.07.02.22.03.30;	author stevenh;	state Exp;
branches;
next	1.42;

1.42
date	2014.07.02.22.01.43;	author stevenh;	state Exp;
branches;
next	1.41;

1.41
date	2014.07.02.21.55.13;	author stevenh;	state Exp;
branches;
next	1.40;

1.40
date	2014.07.02.21.49.13;	author stevenh;	state Exp;
branches;
next	1.39;

1.39
date	2014.07.02.21.48.55;	author stevenh;	state Exp;
branches;
next	1.38;

1.38
date	2014.07.02.21.48.23;	author stevenh;	state Exp;
branches;
next	1.37;

1.37
date	2014.07.02.21.48.14;	author stevenh;	state Exp;
branches;
next	1.36;

1.36
date	2014.07.02.21.47.58;	author stevenh;	state Exp;
branches;
next	1.35;

1.35
date	2014.07.02.21.47.45;	author stevenh;	state Exp;
branches;
next	1.34;

1.34
date	2014.07.02.21.47.25;	author stevenh;	state Exp;
branches;
next	1.33;

1.33
date	2014.07.02.21.46.56;	author stevenh;	state Exp;
branches;
next	1.32;

1.32
date	2014.07.02.21.46.26;	author stevenh;	state Exp;
branches;
next	1.31;

1.31
date	2014.07.02.21.46.17;	author stevenh;	state Exp;
branches;
next	1.30;

1.30
date	2014.07.02.21.44.35;	author stevenh;	state Exp;
branches;
next	1.29;

1.29
date	2014.07.02.21.44.20;	author stevenh;	state Exp;
branches;
next	1.28;

1.28
date	2014.07.02.21.44.13;	author stevenh;	state Exp;
branches;
next	1.27;

1.27
date	2014.07.02.21.43.59;	author stevenh;	state Exp;
branches;
next	1.26;

1.26
date	2014.07.02.21.43.38;	author stevenh;	state Exp;
branches;
next	1.25;

1.25
date	2014.07.02.21.43.11;	author stevenh;	state Exp;
branches;
next	1.24;

1.24
date	2014.07.02.21.41.25;	author stevenh;	state Exp;
branches;
next	1.23;

1.23
date	2014.07.02.21.40.17;	author stevenh;	state Exp;
branches;
next	1.22;

1.22
date	2014.07.02.21.40.04;	author stevenh;	state Exp;
branches;
next	1.21;

1.21
date	2014.07.02.21.39.53;	author stevenh;	state Exp;
branches;
next	1.20;

1.20
date	2014.07.02.21.39.35;	author stevenh;	state Exp;
branches;
next	1.19;

1.19
date	2014.07.02.21.39.07;	author stevenh;	state Exp;
branches;
next	1.18;

1.18
date	2014.07.02.21.37.56;	author stevenh;	state Exp;
branches;
next	1.17;

1.17
date	2014.07.02.21.35.35;	author stevenh;	state Exp;
branches;
next	1.16;

1.16
date	2014.07.02.21.30.54;	author stevenh;	state Exp;
branches;
next	1.15;

1.15
date	2014.07.02.21.28.16;	author stevenh;	state Exp;
branches;
next	1.14;

1.14
date	2014.07.01.15.09.56;	author stevenh;	state Exp;
branches;
next	1.13;

1.13
date	2014.07.01.15.09.11;	author stevenh;	state Exp;
branches;
next	1.12;

1.12
date	2014.07.01.15.05.59;	author stevenh;	state Exp;
branches;
next	1.11;

1.11
date	2014.07.01.15.05.08;	author stevenh;	state Exp;
branches;
next	1.10;

1.10
date	2014.07.01.15.04.49;	author stevenh;	state Exp;
branches;
next	1.9;

1.9
date	2014.07.01.15.04.33;	author stevenh;	state Exp;
branches;
next	1.8;

1.8
date	2014.07.01.15.02.41;	author stevenh;	state Exp;
branches;
next	1.7;

1.7
date	2014.06.30.21.27.25;	author stevenh;	state Exp;
branches;
next	1.6;

1.6
date	2014.06.30.19.31.03;	author stevenh;	state Exp;
branches;
next	1.5;

1.5
date	2014.06.30.19.28.48;	author stevenh;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.30.18.38.17;	author stevenh;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.30.18.37.47;	author stevenh;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.30.18.21.09;	author stevenh;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.30.18.18.40;	author stevenh;	state Exp;
branches;
next	;


desc
@@


1.47
log
@*** empty log message ***
@
text
@import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.*;

public class Game extends JFrame implements KeyListener, ActionListener {
	private static final long serialVersionUID = 1L;
	
	JTextArea displayArea;
    JTextField typingArea;
    int cnt = 0;

    public static void main(String[] args) {
        //Schedule a job for event dispatch thread: creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    private static void createAndShowGUI() {
        //Create and set up the window.
        Game frame = new Game("Game 2048!");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Set up the content pane.
        frame.addComponentsToPane();
        
        
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    private void addComponentsToPane() {
        Board2048 b = new Board2048(); //setup new board
        b.printBoard(); 


        JButton button = new JButton("Clear");
        button.addActionListener(this);
        
        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);
        
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        
        getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);
    }
    
    public Game(String name) {
        super(name);
    }
    
    public void keyPressed(KeyEvent e) { } //don't care but required
    public void keyReleased(KeyEvent e) { } //don't care but required
    public void keyTyped(KeyEvent e) { 
       String c = e.getKeyChar() + ""; 
       switch(c.toLowerCase()) {
          case "y":
             displayArea.setText("-Y-" + cnt++);
             break;
          case "n":
             displayArea.setText("-N-" + cnt++);
             break;
          case "q":
             System.exit(0);
             break;
       }
       typingArea.setText("");
       typingArea.requestFocusInWindow();
    }
    
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("");
        displayArea.append(e.getActionCommand() + "\n");
        typingArea.setText("");
        
        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }
}
@


1.46
log
@*** empty log message ***
@
text
@d1 2
a2 1
import java.awt.*;
d6 1
a6 1
public class GameDemo {
d8 81
a88 23

   private JFrame mainFrame;
   private JLabel headerLabel;
   private JLabel statusLabel;
   private JPanel controlPanel;


   public GameDemo() {
      prepareGUI();
   }

   public static void main(String[] args) {
      GameDemo gdemo = new GameDemo();
      gdemo.ShowGame();
   }

   private void prepareGUI() {
      mainFrame = new JFrame("2048!");
      mainFrame.setSize(400,400);
      mainFrame.setLayout(new GridLayout(3,1));
      headerLabel = new JLabel("",JLabel.CENTER);
      statusLabel = new JLabel("",JLabel.CENTER);
   }
@


1.45
log
@*** empty log message ***
@
text
@d23 1
a23 1
   private prepareGUI() {
@


1.44
log
@*** empty log message ***
@
text
@d5 1
a5 1
public class Game {
d12 18
@


1.43
log
@*** empty log message ***
@
text
@d11 1
a11 1
   private controlPanel;
@


1.42
log
@*** empty log message ***
@
text
@d1 1
a1 2
import java.awt.BorderLayout;
import java.awt.Dimension;
d5 1
a5 1
public class Game extends JFrame implements KeyListener, ActionListener {
a6 4
	
	JTextArea displayArea;
    JTextField typingArea;
    int cnt = 0;
d8 4
a11 76
    public static void main(String[] args) {
        //Schedule a job for event dispatch thread: creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    private static void createAndShowGUI() {
        //Create and set up the window.
        Game frame = new Game("Game 2048!");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Set up the content pane.
        frame.addComponentsToPane();
        
        
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    private void addComponentsToPane() {
        Board2048 b = new Board2048(); //setup new board
        b.printBoard(); 


        JButton button = new JButton("Clear");
        button.addActionListener(this);
        
        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);
        
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        
        getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);
    }
    
    public Game(String name) {
        super(name);
    }
    
    public void keyPressed(KeyEvent e) { } //don't care but required
    public void keyReleased(KeyEvent e) { } //don't care but required
    public void keyTyped(KeyEvent e) { 
       String c = e.getKeyChar() + ""; 
       switch(c.toLowerCase()) {
          case "y":
             displayArea.setText("-Y-" + cnt++);
             break;
          case "n":
             displayArea.setText("-N-" + cnt++);
             break;
          case "q":
             System.exit(0);
             break;
       }
       typingArea.setText("");
       typingArea.requestFocusInWindow();
    }
    
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("");
        displayArea.append(e.getActionCommand() + "\n");
        typingArea.setText("");
        
        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }
@


1.41
log
@*** empty log message ***
@
text
@d6 1
a6 3
//public class Game extends JFrame implements KeyListener, ActionListener {
/*
public class Game implements KeyListener, ActionListener {
d8 62
a69 83

   JTextArea displayArea;
   JTextField typingArea;
   int cnt = 0;

   /**
   Creates invokeLater runnable thread that executes that shows the GUI  <br>
   -- <br>
   Schedule a job for event dispatch thread: creating and showing this application's GUI.
   @@param args takes command line arguments
   */

   public static void main(String[] args) {
      javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
         createAndShowGUI();
      }
   });
   }
   
   private static void createAndShowGUI() {
      //Create and set up the window.
      JFrame frame = new JFrame("Game 2048!");

      //Game frame = new Game("Game 2048!");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      addComponentsToPane();

      //Display the window.
      frame.pack();
      frame.setVisible(true);
   }

   public void keyPressed(KeyEvent e) { } //don't care but required
   public void keyReleased(KeyEvent e) { } //don't care but required
   public void keyTyped(KeyEvent e) {  }


   public void actionPerformed(ActionEvent e) {
      //Clear the text components.
      displayArea.setText("");
      displayArea.append(e.getActionCommand() + "\n");
      typingArea.setText("");
     
      //Return the focus to the typing area.
      typingArea.requestFocusInWindow();
   }

   
   private static void addComponentsToPane() {
      Board2048 b = new Board2048(); //setup new board
      b.printBoard(); 

      JButton button = new JButton("Clear");
      button.addActionListener(this);

      typingArea = new JTextField(20);
      typingArea.addKeyListener(this);

      displayArea = new JTextArea();
      displayArea.setEditable(false);
      JScrollPane scrollPane = new JScrollPane(displayArea);
      scrollPane.setPreferredSize(new Dimension(400, 400));

      getContentPane().add(typingArea, BorderLayout.PAGE_START);
      getContentPane().add(scrollPane, BorderLayout.CENTER);
      getContentPane().add(button, BorderLayout.PAGE_END);
   }
   
   public Game(String name) {
       super(name);
   }
   
   public void keyPressed(KeyEvent e) { } //don't care but required
   public void keyReleased(KeyEvent e) { } //don't care but required
   public void keyTyped(KeyEvent e) { 
      String c = e.getKeyChar() + ""; 
      switch(c.toLowerCase()) {
         case "y":
            displayArea.setText("-Y-" + cnt++);
            break;
         case "n":
d72 1
a72 1
         case "q":
d75 14
a88 4
      }
      typingArea.setText("");
      typingArea.requestFocusInWindow();
   }
a89 1
*/
@


1.40
log
@*** empty log message ***
@
text
@d7 1
a13 2
   /*
   */
a79 1
   /*
a101 2

   */
d103 1
@


1.39
log
@*** empty log message ***
@
text
@d61 1
a61 1
   private void addComponentsToPane() {
@


1.38
log
@*** empty log message ***
@
text
@d38 1
a38 1
      this.addComponentsToPane();
d61 1
a61 1
   public void addComponentsToPane() {
@


1.37
log
@*** empty log message ***
@
text
@d38 1
a38 1
      addComponentsToPane();
@


1.36
log
@*** empty log message ***
@
text
@a9 1
   /*
d13 1
@


1.35
log
@,
@
text
@d61 1
a61 1
   private void addComponentsToPane() {
@


1.34
log
@*** empty log message ***
@
text
@a47 1
   public void addComponentsToPane() { }
@


1.33
log
@*** empty log message ***
@
text
@d38 1
@


1.32
log
@*** empty log message ***
@
text
@a59 1
   /*
d81 1
@


1.31
log
@*** empty log message ***
@
text
@a46 1
   public void actionPerformed(ActionEvent e) { }
@


1.30
log
@*** empty log message ***
@
text
@a34 1

d37 1
a37 3
      
      //Set up the content pane.
      //frame.addComponentsToPane();
d50 11
a105 9
   public void actionPerformed(ActionEvent e) {
      //Clear the text components.
      displayArea.setText("");
      displayArea.append(e.getActionCommand() + "\n");
      typingArea.setText("");
     
      //Return the focus to the typing area.
      typingArea.requestFocusInWindow();
   }
@


1.29
log
@*** empty log message ***
@
text
@d40 1
a40 1
      frame.addComponentsToPane();
@


1.28
log
@*** empty log message ***
@
text
@d51 1
a51 1
   private void addComponentsToPane() { }
@


1.27
log
@*** empty log message ***
@
text
@d51 1
@


1.26
log
@*** empty log message ***
@
text
@d50 1
@


1.25
log
@*** empty log message ***
@
text
@d47 4
@


1.24
log
@*** empty log message ***
@
text
@d10 1
d14 1
d47 2
d101 1
@


1.23
log
@*** empty log message ***
@
text
@d15 3
a17 1
   Creates invokeLater runnable thread that executes that shows the GUI
d20 1
a21 1
      //Schedule a job for event dispatch thread: creating and showing this application's GUI.
@


1.22
log
@*** empty log message ***
@
text
@d29 1
a29 1
      static JFrame frame = new JFrame("Game 2048!");
@


1.21
log
@*** empty log message ***
@
text
@a9 1
   static JFrame frame = new JFrame("Game 2048!");
d29 1
@


1.20
log
@*** empty log message ***
@
text
@d10 1
a10 1
   JFrame frame = new JFrame("Game 2048!");
@


1.19
log
@*** empty log message ***
@
text
@d10 1
a29 1
      JFrame frame = new JFrame("Game 2048!");
@


1.18
log
@*** empty log message ***
@
text
@d10 3
a27 4
      JTextArea displayArea;
      JTextField typingArea;
      int cnt = 0;

d30 2
@


1.17
log
@*** empty log message ***
@
text
@a9 4
   JFrame frame = new JFrame();
	JTextArea displayArea;
   JTextField typingArea;
   int cnt = 0;
d25 4
d30 2
a31 1
      Game frame = new Game("Game 2048!");
@


1.16
log
@*** empty log message ***
@
text
@d10 1
a10 3
  
   
	
@


1.15
log
@*** empty log message ***
@
text
@d6 2
a7 1
public class Game extends JFrame implements KeyListener, ActionListener {
d9 3
@


1.14
log
@*** empty log message ***
@
text
@d10 2
a11 2
    JTextField typingArea;
    int cnt = 0;
d13 59
a71 57
    public static void main(String[] args) {
        //Schedule a job for event dispatch thread: creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    private static void createAndShowGUI() {
        //Create and set up the window.
        Game frame = new Game("Game 2048!");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Set up the content pane.
        frame.addComponentsToPane();
        
        
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    private void addComponentsToPane() {
        Board2048 b = new Board2048(); //setup new board
        b.printBoard(); 


        JButton button = new JButton("Clear");
        button.addActionListener(this);
        
        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);
        
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        
        getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);
    }
    
    public Game(String name) {
        super(name);
    }
    
    public void keyPressed(KeyEvent e) { } //don't care but required
    public void keyReleased(KeyEvent e) { } //don't care but required
    public void keyTyped(KeyEvent e) { 
       String c = e.getKeyChar() + ""; 
       switch(c.toLowerCase()) {
          case "y":
             displayArea.setText("-Y-" + cnt++);
             break;
          case "n":
d74 1
a74 1
          case "q":
d77 14
a90 14
       }
       typingArea.setText("");
       typingArea.requestFocusInWindow();
    }
    
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("");
        displayArea.append(e.getActionCommand() + "\n");
        typingArea.setText("");
        
        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }
@


1.13
log
@*** empty log message ***
@
text
@d37 4
@


1.12
log
@*** empty log message ***
@
text
@d9 1
a9 1
	 JTextArea displayArea;
a11 4

    Board2048 board = new Board2048();
    board.printBoard();

@


1.11
log
@*** empty log message ***
@
text
@d14 1
a14 1
    printBoard();
@


1.10
log
@*** empty log message ***
@
text
@d14 1
a14 1
    board.printBoard();
@


1.9
log
@*** empty log message ***
@
text
@d14 1
@


1.8
log
@*** empty log message ***
@
text
@d9 1
a9 1
	JTextArea displayArea;
d14 1
@


1.7
log
@*** empty log message ***
@
text
@d13 2
@


1.6
log
@*** empty log message ***
@
text
@a1 1
import java.awt.Container;
a4 1
import package.Game2048;
d7 3
a9 1
    JTextArea displayArea;
@


1.5
log
@*** empty log message ***
@
text
@d6 1
a6 1
import Game2048;
@


1.4
log
@*** empty log message ***
@
text
@d6 1
@


1.3
log
@*** empty log message ***
@
text
@a58 4
       /*
       displayArea.setText("");
       typingArea.setText("");
        */
d71 2
a72 1
        typingArea.requestFocusInWindow();
@


1.2
log
@*** empty log message ***
@
text
@d59 1
d62 1
d66 1
a66 1
             displayArea.append("-Y-" + cnt++);
d69 1
a69 1
             displayArea.append("-N-" + cnt++);
@


1.1
log
@Initial revision
@
text
@d69 3
@
