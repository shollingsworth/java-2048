head	1.41;
access;
symbols;
locks
	stevenh:1.41; strict;
comment	@# @;


1.41
date	2014.06.30.18.18.01;	author stevenh;	state Exp;
branches;
next	1.40;

1.40
date	2014.06.30.18.16.06;	author stevenh;	state Exp;
branches;
next	1.39;

1.39
date	2014.06.30.18.15.37;	author stevenh;	state Exp;
branches;
next	1.38;

1.38
date	2014.06.30.18.14.57;	author stevenh;	state Exp;
branches;
next	1.37;

1.37
date	2014.06.30.18.14.38;	author stevenh;	state Exp;
branches;
next	1.36;

1.36
date	2014.06.30.18.13.23;	author stevenh;	state Exp;
branches;
next	1.35;

1.35
date	2014.06.30.18.12.51;	author stevenh;	state Exp;
branches;
next	1.34;

1.34
date	2014.06.30.18.10.39;	author stevenh;	state Exp;
branches;
next	1.33;

1.33
date	2014.06.30.18.09.30;	author stevenh;	state Exp;
branches;
next	1.32;

1.32
date	2014.06.30.18.05.30;	author stevenh;	state Exp;
branches;
next	1.31;

1.31
date	2014.06.30.18.05.08;	author stevenh;	state Exp;
branches;
next	1.30;

1.30
date	2014.06.30.18.04.27;	author stevenh;	state Exp;
branches;
next	1.29;

1.29
date	2014.06.30.18.04.11;	author stevenh;	state Exp;
branches;
next	1.28;

1.28
date	2014.06.30.18.00.01;	author stevenh;	state Exp;
branches;
next	1.27;

1.27
date	2014.06.30.17.51.14;	author stevenh;	state Exp;
branches;
next	1.26;

1.26
date	2014.06.30.17.43.16;	author stevenh;	state Exp;
branches;
next	1.25;

1.25
date	2014.06.30.17.42.58;	author stevenh;	state Exp;
branches;
next	1.24;

1.24
date	2014.06.30.15.38.07;	author stevenh;	state Exp;
branches;
next	1.23;

1.23
date	2014.06.30.04.37.37;	author stevenh;	state Exp;
branches;
next	1.22;

1.22
date	2014.06.30.04.37.21;	author stevenh;	state Exp;
branches;
next	1.21;

1.21
date	2014.06.30.04.18.05;	author stevenh;	state Exp;
branches;
next	1.20;

1.20
date	2014.06.30.04.17.15;	author stevenh;	state Exp;
branches;
next	1.19;

1.19
date	2014.06.30.04.17.05;	author stevenh;	state Exp;
branches;
next	1.18;

1.18
date	2014.06.30.04.16.35;	author stevenh;	state Exp;
branches;
next	1.17;

1.17
date	2014.06.30.04.15.36;	author stevenh;	state Exp;
branches;
next	1.16;

1.16
date	2014.06.30.04.13.09;	author stevenh;	state Exp;
branches;
next	1.15;

1.15
date	2014.06.30.04.10.59;	author stevenh;	state Exp;
branches;
next	1.14;

1.14
date	2014.06.30.04.08.41;	author stevenh;	state Exp;
branches;
next	1.13;

1.13
date	2014.06.30.04.06.23;	author stevenh;	state Exp;
branches;
next	1.12;

1.12
date	2014.06.30.03.19.12;	author stevenh;	state Exp;
branches;
next	1.11;

1.11
date	2014.06.30.03.18.48;	author stevenh;	state Exp;
branches;
next	1.10;

1.10
date	2014.06.30.03.18.22;	author stevenh;	state Exp;
branches;
next	1.9;

1.9
date	2014.06.30.03.01.57;	author stevenh;	state Exp;
branches;
next	1.8;

1.8
date	2014.06.30.03.01.32;	author stevenh;	state Exp;
branches;
next	1.7;

1.7
date	2014.06.30.03.00.49;	author stevenh;	state Exp;
branches;
next	1.6;

1.6
date	2014.06.30.03.00.09;	author stevenh;	state Exp;
branches;
next	1.5;

1.5
date	2014.06.30.02.59.59;	author stevenh;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.30.02.59.47;	author stevenh;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.30.02.59.39;	author stevenh;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.30.02.58.36;	author stevenh;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.30.02.57.42;	author stevenh;	state Exp;
branches;
next	;


desc
@@


1.41
log
@*** empty log message ***
@
text
@import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.*;

public class TestKey extends JFrame implements KeyListener, ActionListener {
    JTextArea displayArea;
    JTextField typingArea;
    int cnt = 0;

    public static void main(String[] args) {
        //Schedule a job for event dispatch thread: creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    private static void createAndShowGUI() {
        //Create and set up the window.
        TestKey frame = new TestKey("Game 2048!");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        //Set up the content pane.
        frame.addComponentsToPane();
        
        
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    private void addComponentsToPane() {
        JButton button = new JButton("Clear");
        button.addActionListener(this);
        
        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);
        
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(400, 400));
        
        getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);
    }
    
    public TestKey(String name) {
        super(name);
    }
    
    public void keyPressed(KeyEvent e) { } //don't care but required
    public void keyReleased(KeyEvent e) { } //don't care but required
    public void keyTyped(KeyEvent e) { 
       displayArea.setText("");
       typingArea.setText("");
       String c = e.getKeyChar() + ""; 
       switch(c.toLowerCase()) {
          case "y":
             displayArea.append("-Y-" + cnt++);
             break;
          case "n":
             displayArea.append("-N-" + cnt++);
             break;
       }
        typingArea.requestFocusInWindow();
    }
    
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("");
        displayArea.append(e.getActionCommand() + "\n");
        typingArea.setText("");
        
        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }
}
@


1.40
log
@*** empty log message ***
@
text
@a6 5
/**
 Need to Investigate ActionListener stuff for multiple commands:
http://www.charlesli.org/pic20a/lectures/lecture19/actionnotes3.html
 */

a60 1
       //char c =
a61 1

@


1.39
log
@*** empty log message ***
@
text
@d65 1
@


1.38
log
@*** empty log message ***
@
text
@d76 1
@


1.37
log
@*** empty log message ***
@
text
@d64 1
a75 1
       displayArea.setText("");
@


1.36
log
@*** empty log message ***
@
text
@a73 1
          //default:  displayArea.append("-invalid-" + cnt++); break;
d75 1
d80 1
a80 1
        //displayArea.setText("");
@


1.35
log
@*** empty log message ***
@
text
@d68 7
a74 3
          case "y": displayArea.append("-Y-" + cnt++); break;
          case "n": displayArea.append("-N-" + cnt++); break;
          default:  displayArea.append("-invalid-" + cnt++); break;
@


1.34
log
@*** empty log message ***
@
text
@d66 4
a69 3
       switch(c) {
          case toLowerCase("y"): displayArea.append("-Y-" + cnt++); break;
          case toLowerCase("n"): displayArea.append("-N-" + cnt++); break;
@


1.33
log
@*** empty log message ***
@
text
@d67 2
a68 2
          case "y": displayArea.append("-Y-" + cnt++); break;
          case "n": displayArea.append("-Y-" + cnt++); break;
@


1.32
log
@*** empty log message ***
@
text
@d64 5
a68 3
       switch(e.getKeyChar()) {
          case Convert.ToChar("y"): displayArea.append("-Y-" + cnt++); break;
          case Convert.ToChar("n"): displayArea.append("-Y-" + cnt++); break;
@


1.31
log
@*** empty log message ***
@
text
@d65 2
a66 2
          case "y": displayArea.append("-Y-" + cnt++); break;
          case "n": displayArea.append("-Y-" + cnt++); break;
@


1.30
log
@*** empty log message ***
@
text
@d65 2
a66 2
          case y: displayArea.append("-Y-" + cnt++); break;
          case n: displayArea.append("-Y-" + cnt++); break;
@


1.29
log
@*** empty log message ***
@
text
@d65 2
a66 2
          case "y": displayArea.append("-Y-" + cnt++); break;
          case "n": displayArea.append("-Y-" + cnt++); break;
@


1.28
log
@*** empty log message ***
@
text
@a45 1
        //typingArea.addActionListener(this);
d61 2
d64 5
a68 1
       displayArea.append("-" + cnt++);
a69 2
    public void keyPressed(KeyEvent e) { } //don't care but required
    public void keyReleased(KeyEvent e) { } //don't care but required
@


1.27
log
@*** empty log message ***
@
text
@d46 1
a46 1
        typingArea.addActionListener(this);
@


1.26
log
@*** empty log message ***
@
text
@d46 1
d70 2
a71 2
        displayArea.setText("");
        displayArea.append(e.getActionCommand());
@


1.25
log
@*** empty log message ***
@
text
@d70 1
a70 1
        displayArea.append(e.getActionCommand() + "");
@


1.24
log
@*** empty log message ***
@
text
@d70 1
@


1.23
log
@*** empty log message ***
@
text
@a6 3

dkdkdk

@


1.22
log
@*** empty log message ***
@
text
@d7 3
@


1.21
log
@*** empty log message ***
@
text
@d7 5
@


1.20
log
@*** empty log message ***
@
text
@a57 1

@


1.19
log
@*** empty log message ***
@
text
@d57 1
a57 1
       displayArea.append("" + cnt++);
@


1.18
log
@*** empty log message ***
@
text
@d57 1
a57 1
       displayArea.setText("" + cnt++);
@


1.17
log
@*** empty log message ***
@
text
@d57 1
a57 1
       displayArea.setText(cnt++);
@


1.16
log
@*** empty log message ***
@
text
@d10 1
d56 6
a61 3
    public void keyTyped(KeyEvent e) {  }
    public void keyPressed(KeyEvent e) { }
    public void keyReleased(KeyEvent e) { }
@


1.15
log
@*** empty log message ***
@
text
@d22 1
a22 1
        TestKey frame = new TestKey("KeyEventDemo");
@


1.14
log
@*** empty log message ***
@
text
@a66 1
    
@


1.13
log
@*** empty log message ***
@
text
@a19 6
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */

d55 3
a57 9
    /** Handle the key typed event from the text field. */
    public void keyTyped(KeyEvent e) {
        displayInfo(e, "KEY TYPED: ");
    }
    
    /** Handle the key pressed event from the text field. */
    public void keyPressed(KeyEvent e) {
        displayInfo(e, "KEY PRESSED: ");
    }
a58 6
    /** Handle the key released event from the text field. */
    public void keyReleased(KeyEvent e) {
        displayInfo(e, "KEY RELEASED: ");
    }
    
    /** Handle the button click. */
a67 61
    /*
     * We have to jump through some hoops to avoid
     * trying to print non-printing characters
     * such as Shift.  (Not only do they not print,
     * but if you put them in a String, the characters
     * afterward won't show up in the text area.)
     */
    private void displayInfo(KeyEvent e, String keyStatus){
        
        //You should only rely on the key char if the event
        //is a key typed event.
        int id = e.getID();
        String keyString;
        if (id == KeyEvent.KEY_TYPED) {
            char c = e.getKeyChar();
            keyString = "key character = '" + c + "'";
        } else {
            int keyCode = e.getKeyCode();
            keyString = "key code = " + keyCode
                    + " ("
                    + KeyEvent.getKeyText(keyCode)
                    + ")";
        }
        
        int modifiersEx = e.getModifiersEx();
        String modString = "extended modifiers = " + modifiersEx;
        String tmpString = KeyEvent.getModifiersExText(modifiersEx);
        if (tmpString.length() > 0) {
            modString += " (" + tmpString + ")";
        } else {
            modString += " (no extended modifiers)";
        }
        
        String actionString = "action key? ";
        if (e.isActionKey()) {
            actionString += "YES";
        } else {
            actionString += "NO";
        }
        
        String locationString = "key location: ";
        int location = e.getKeyLocation();
        if (location == KeyEvent.KEY_LOCATION_STANDARD) {
            locationString += "standard";
        } else if (location == KeyEvent.KEY_LOCATION_LEFT) {
            locationString += "left";
        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {
            locationString += "right";
        } else if (location == KeyEvent.KEY_LOCATION_NUMPAD) {
            locationString += "numpad";
        } else { // (location == KeyEvent.KEY_LOCATION_UNKNOWN)
            locationString += "unknown";
        }
        
        displayArea.append(keyStatus  
                + "    " + keyString  
                + "    " + modString  
                + "    " + actionString 
                + "    " + locationString  + "\n");
        displayArea.setCaretPosition(displayArea.getDocument().getLength());
    }
@


1.12
log
@*** empty log message ***
@
text
@d25 1
a40 1
        
a46 8
        //Uncomment this if you wish to turn off focus
        //traversal.  The focus subsystem consumes
        //focus traversal keys, such as Tab and Shift Tab.
        //If you uncomment the following line of code, this
        //disables focus traversal and the Tab events will
        //become available to the key event listener.
        //typingArea.setFocusTraversalKeysEnabled(false);
        
a59 1
    
@


1.11
log
@*** empty log message ***
@
text
@a11 1
        /* Turn off metal's use of bold fonts */
@


1.10
log
@*** empty log message ***
@
text
@d154 1
a154 1
                + "    " + locationString );
@


1.9
log
@*** empty log message ***
@
text
@a10 3

    static final String newline = System.getProperty("line.separator");
    
d150 5
a154 5
        displayArea.append(keyStatus + newline
                + "    " + keyString + newline
                + "    " + modString + newline
                + "    " + actionString + newline
                + "    " + locationString + newline);
@


1.8
log
@*** empty log message ***
@
text
@d62 1
a62 1
        scrollPane.setPreferredSize(new Dimension(375, 125));
@


1.7
log
@*** empty log message ***
@
text
@a68 1
    /*
a71 1
     */
@


1.6
log
@*** empty log message ***
@
text
@d69 1
d73 1
@


1.5
log
@*** empty log message ***
@
text
@d31 1
a31 1
        TestKey = new TestKey("KeyEventDemo");
@


1.4
log
@*** empty log message ***
@
text
@d31 1
a31 1
        frame = new TestKey("KeyEventDemo");
@


1.3
log
@*** empty log message ***
@
text
@d31 1
a31 1
        this frame = new TestKey("KeyEventDemo");
@


1.2
log
@*** empty log message ***
@
text
@d16 1
a16 4
        UIManager.put("swing.boldMetal", Boolean.FALSE);
        
        //Schedule a job for event dispatch thread:
        //creating and showing this application's GUI.
d31 1
a31 1
        TestKey frame = new TestKey("KeyEventDemo");
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
public class KeyEventDemo extends JFrame implements KeyListener, ActionListener {
d34 1
a34 1
        KeyEventDemo frame = new KeyEventDemo("KeyEventDemo");
d72 1
a72 1
    public KeyEventDemo(String name) {
@
